import { useState, useEffect } from 'react'
import { Link } from 'react-router-dom'
import type { User } from 'firebase/auth'
import { getUserTrips, createTrip, deleteTrip, getTrip, updateTrip } from '../services/trips'
import type { TripSummary } from '../types/Trip'
import { useNotifications } from '../hooks/useNotifications'
import NotificationSystem from '../components/layout/NotificationSystem'
import './TripsPage.css'

interface TripsPageProps {
  user: User | null
}

const TripsPage: React.FC<TripsPageProps> = ({ user }) => {
  const [trips, setTrips] = useState<TripSummary[]>([])
  const [loading, setLoading] = useState(false)
  const [showCreateForm, setShowCreateForm] = useState(false)
  const [showEditForm, setShowEditForm] = useState(false)
  const [editingTripId, setEditingTripId] = useState<string | null>(null)
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    city: 'Vienna',
    startDate: '',
    endDate: '',
    isPublic: false
  })
  const { notifications, removeNotification, showSuccess, showError } = useNotifications()

  // Load user's trips
  useEffect(() => {
    if (user) {
      loadTrips()
    }
  }, [user])

  const loadTrips = async () => {
    if (!user) return
    
    setLoading(true)
    try {
      const userTrips = await getUserTrips(user)
      setTrips(userTrips)
    } catch (error) {
      console.error('Error loading trips:', error)
    }
    setLoading(false)
  }

  const handleCreateTrip = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!user || !formData.name || !formData.startDate || !formData.endDate) {
      console.log('Validation failed:', { user: !!user, name: formData.name, startDate: formData.startDate, endDate: formData.endDate })
      return
    }

    // Date validation
    if (new Date(formData.endDate) < new Date(formData.startDate)) {
      showError('End date cannot be before start date')
      return
    }

    console.log('Creating trip with data:', formData)
    setLoading(true)
    
    try {
      const newTrip = await createTrip(user, {
        name: formData.name,
        description: formData.description,
        city: formData.city,
        startDate: formData.startDate,
        endDate: formData.endDate,
        isPublic: formData.isPublic,
        days: [], // Will be generated by createTrip
        tags: []
      })

      console.log('Trip creation result:', newTrip)

      if (newTrip) {
        console.log('Trip created successfully, refreshing list')
        await loadTrips() // Refresh trips list
        setShowCreateForm(false)
        setFormData({
          name: '',
          description: '',
          city: 'Vienna',
          startDate: '',
          endDate: '',
          isPublic: false
        })
        console.log('Form reset and modal closed')
      } else {
        console.error('Trip creation returned null')
      }
    } catch (error) {
      console.error('Error creating trip:', error)
    }
    setLoading(false)
  }

  const formatDateRange = (startDate: string, endDate: string) => {
    const start = new Date(startDate).toLocaleDateString()
    const end = new Date(endDate).toLocaleDateString()
    return start === end ? start : `${start} - ${end}`
  }

  const handleDeleteTrip = async (tripId: string, tripName: string) => {
    if (!confirm(`Are you sure you want to delete "${tripName}"? This action cannot be undone.`)) {
      return
    }

    const success = await deleteTrip(tripId)
    if (success) {
      await loadTrips() // Refresh the list
      showSuccess(`"${tripName}" has been deleted.`)
    } else {
      showError('Failed to delete trip. Please try again.')
    }
  }

  const handleEditTrip = async (tripId: string) => {
    try {
      const trip = await getTrip(tripId)
      if (trip) {
        setFormData({
          name: trip.name,
          description: trip.description || '',
          city: trip.city,
          startDate: trip.startDate,
          endDate: trip.endDate,
          isPublic: trip.isPublic || false
        })
        setEditingTripId(tripId)
        setShowEditForm(true)
      }
    } catch (error) {
      console.error('Error loading trip for edit:', error)
      showError('Failed to load trip details.')
    }
  }

  const handleUpdateTrip = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!user || !editingTripId || !formData.name || !formData.startDate || !formData.endDate) {
      return
    }

    // Date validation
    if (new Date(formData.endDate) < new Date(formData.startDate)) {
      showError('End date cannot be before start date')
      return
    }

    setLoading(true)
    
    try {
      const success = await updateTrip(editingTripId, {
        name: formData.name,
        description: formData.description,
        city: formData.city,
        startDate: formData.startDate,
        endDate: formData.endDate,
        isPublic: formData.isPublic
      })

      if (success) {
        await loadTrips() // Refresh trips list
        setShowEditForm(false)
        setEditingTripId(null)
        setFormData({
          name: '',
          description: '',
          city: 'Vienna',
          startDate: '',
          endDate: '',
          isPublic: false
        })
        showSuccess('Trip updated successfully!')
      } else {
        showError('Failed to update trip. Please try again.')
      }
    } catch (error) {
      console.error('Error updating trip:', error)
      showError('Failed to update trip. Please try again.')
    }
    setLoading(false)
  }

  if (!user) {
    return (
      <div className="trips-page">
        <div className="auth-prompt">
          <h2>üó∫Ô∏è Plan Your Perfect Trip</h2>
          <p>Sign in to create and save custom itineraries for your Vienna adventures.</p>
        </div>
      </div>
    )
  }

  return (
    <div className="trips-page">
      <NotificationSystem 
        notifications={notifications}
        onRemove={removeNotification}
      />
      <div className="trips-header">
        <div className="header-content">
          <h1>Your Trips</h1>
          <p>Plan, organize, and share your Vienna adventures</p>
          <Link 
            to="/trips/new"
            className="create-trip-btn"
          >
            ‚úàÔ∏è Create New Trip
          </Link>
        </div>
      </div>

      <div className="trips-content">
        {/* Create Trip Modal */}
        {showCreateForm && (
          <div className="modal-overlay" onClick={() => setShowCreateForm(false)}>
            <div className="create-trip-modal" onClick={(e) => e.stopPropagation()}>
              <h3>Create New Trip</h3>
              <form onSubmit={handleCreateTrip}>
                <div className="form-group">
                  <label>Trip Name</label>
                  <input
                    type="text"
                    value={formData.name}
                    onChange={(e) => setFormData({...formData, name: e.target.value})}
                    placeholder="e.g., Weekend in Vienna"
                    required
                  />
                </div>
                
                <div className="form-group">
                  <label>Description (Optional)</label>
                  <textarea
                    value={formData.description}
                    onChange={(e) => setFormData({...formData, description: e.target.value})}
                    placeholder="What makes this trip special?"
                    rows={3}
                  />
                </div>
                
                <div className="form-row">
                  <div className="form-group">
                    <label>Start Date</label>
                    <input
                      type="date"
                      value={formData.startDate}
                      onChange={(e) => setFormData({...formData, startDate: e.target.value})}
                      required
                    />
                  </div>
                  
                  <div className="form-group">
                    <label>End Date</label>
                    <input
                      type="date"
                      value={formData.endDate}
                      onChange={(e) => setFormData({...formData, endDate: e.target.value})}
                      min={formData.startDate}
                      required
                    />
                  </div>
                </div>
                
                <div className="form-group">
                  <label className="checkbox-label">
                    <input
                      type="checkbox"
                      checked={formData.isPublic}
                      onChange={(e) => setFormData({...formData, isPublic: e.target.checked})}
                    />
                    Make this trip public (others can view and copy)
                  </label>
                </div>
                
                <div className="modal-actions">
                  <button 
                    type="button" 
                    onClick={() => setShowCreateForm(false)}
                    className="btn-secondary"
                  >
                    Cancel
                  </button>
                  <button 
                    type="submit" 
                    className="btn-primary"
                    disabled={loading}
                  >
                    {loading ? 'Creating...' : 'Create Trip'}
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        {/* Edit Trip Modal */}
        {showEditForm && (
          <div className="modal-overlay" onClick={() => setShowEditForm(false)}>
            <div className="create-trip-modal" onClick={(e) => e.stopPropagation()}>
              <h3>Edit Trip</h3>
              <form onSubmit={handleUpdateTrip}>
                <div className="form-group">
                  <label>Trip Name</label>
                  <input
                    type="text"
                    value={formData.name}
                    onChange={(e) => setFormData({...formData, name: e.target.value})}
                    placeholder="e.g., Weekend in Vienna"
                    required
                  />
                </div>
                
                <div className="form-group">
                  <label>Description (Optional)</label>
                  <textarea
                    value={formData.description}
                    onChange={(e) => setFormData({...formData, description: e.target.value})}
                    placeholder="What makes this trip special?"
                    rows={3}
                  />
                </div>
                
                <div className="form-row">
                  <div className="form-group">
                    <label>Start Date</label>
                    <input
                      type="date"
                      value={formData.startDate}
                      onChange={(e) => setFormData({...formData, startDate: e.target.value})}
                      required
                    />
                  </div>
                  
                  <div className="form-group">
                    <label>End Date</label>
                    <input
                      type="date"
                      value={formData.endDate}
                      onChange={(e) => setFormData({...formData, endDate: e.target.value})}
                      min={formData.startDate}
                      required
                    />
                  </div>
                </div>
                
                <div className="form-group">
                  <label className="checkbox-label">
                    <input
                      type="checkbox"
                      checked={formData.isPublic}
                      onChange={(e) => setFormData({...formData, isPublic: e.target.checked})}
                    />
                    Make this trip public (others can view and copy)
                  </label>
                </div>
                
                <div className="modal-actions">
                  <button 
                    type="button" 
                    onClick={() => setShowEditForm(false)}
                    className="btn-secondary"
                  >
                    Cancel
                  </button>
                  <button 
                    type="submit" 
                    className="btn-primary"
                    disabled={loading}
                  >
                    {loading ? 'Saving...' : 'Save Changes'}
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        {/* Trips List */}
        {loading && trips.length === 0 ? (
          <div className="loading-state">
            <div className="loading-spinner"></div>
            <p>Loading your trips...</p>
          </div>
        ) : trips.length === 0 ? (
          <div className="empty-trips">
            <div className="empty-icon">üß≥</div>
            <h3>No trips yet</h3>
            <p>Create your first trip to start planning your Vienna adventure!</p>
            <Link 
              to="/trips/new"
              className="create-first-trip-btn"
            >
              ‚úàÔ∏è Create Your First Trip
            </Link>
          </div>
        ) : (
          <div className="trips-grid">
            {trips.map((trip) => (
              <div key={trip.id} className="trip-card">
                <Link to={`/trips/${trip.id}`} className="trip-card-content">
                  <div className="trip-card-header">
                    <h3>{trip.name}</h3>
                    <span className="trip-city">üìç {trip.city}</span>
                  </div>
                  
                  <div className="trip-card-dates">
                    üìÖ {formatDateRange(trip.startDate, trip.endDate)}
                  </div>
                  
                  <div className="trip-card-stats">
                    <span className="stat">
                      üìÖ {trip.dayCount} day{trip.dayCount !== 1 ? 's' : ''}
                    </span>
                    <span className="stat">
                      üìç {trip.locationCount} location{trip.locationCount !== 1 ? 's' : ''}
                    </span>
                  </div>
                  
                  <div className="trip-card-date">
                    Created {trip.createdAt.toLocaleDateString()}
                  </div>
                </Link>
                
                <div className="trip-card-actions">
                  <Link 
                    to={`/trips/${trip.id}`} 
                    className="trip-action-btn primary"
                    title="View trip details"
                  >
                    üëÅÔ∏è View
                  </Link>
                  <Link 
                    to={`/trips/${trip.id}/edit`}
                    className="trip-action-btn secondary"
                    title="Edit trip in planner"
                  >
                    ‚úèÔ∏è Edit
                  </Link>
                  <button 
                    className="trip-action-btn danger"
                    onClick={() => handleDeleteTrip(trip.id, trip.name)}
                    title="Delete trip"
                  >
                    üóëÔ∏è Delete
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  )
}

export default TripsPage